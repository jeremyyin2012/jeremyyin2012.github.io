<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tornados on Jeremy&#39;s blog</title>
    <link>/tornado/</link>
    <description>Recent content in Tornados on Jeremy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 03 Aug 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tornado/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tornado 0000 - 特别说明: 关于译文</title>
      <link>/tornado/00-note/0000-about/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/00-note/0000-about/</guid>
      <description>关于译文 我自己本身并不懂多少关于英文翻译的事情，这里相关的一些翻译内容也并不完全是我一个一个字手打出来的，其中绝大多数翻译内容均借助于 Google Translate 帮我实现，而我最多仅相当于一个审校的角色，对其中的句子进行一些更合理化的修改，或是用词是否恰当及准确，或是句子的通顺及逻辑合理与否。同时由于能力及精力有限，并不能绝对保证内容完全准确无误，如有发现不合理的地方或者错误的地方，还请见谅，也欢迎你反馈于我。
Tornado 是我学习 Python 后进入实际产品开发所使用到的第一个 Web 服务框架，虽然说关于它的功能有些写法可能已经用过很多次了，但是对它依然还没有一个全局的概念感受，所以想借助于这个翻译的过程，给自己加深一下关于它的设计理念、程序逻辑等等相关知识的印象。
所以，译文只是顺便产生的结果，不过虽然即便如此，我也尽量使译文能契合中文的遣词造句，对于一些直译过来感觉奇怪的内容，会稍微做一下调整，以便容易理解。
然后，我自己也会希望能完成所有篇章的翻译，而不是仅仅如同大家都在做的那样，只开个头，翻译一下简单入门部分，后面的更重要的细节内容就反而没有了。
当然，其实如果能有心直接读原文，那是更好的。
当前参考版本：Tornado 5.1
原文链接：http://www.tornadoweb.org/</description>
    </item>
    
    <item>
      <title>Tornado 0101 - 用户指南: 简介</title>
      <link>/tornado/01-guide/0101-intro/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/01-guide/0101-intro/</guid>
      <description>简介 Tornado 是一个用 Python 写的 Web 应用框架和异步网络库，最初是由 FriendFeed 开发的。通过使用非阻塞网络 I/O，Tornado 可以扩展到数万个开放连接（C10K），使其成为长轮询、WebSockets 和其他需要与每个用户建立长期连接的应用程序的理想选择。
Tornado 大致可分为四个主要部分：
 一个 Web 应用框架（包括用于创建 Web 应用程序的 RequestHandler 子类，以及各种支持类）。 HTTP 的客户端和服务器端实现（AsyncHTTPClient 和 HTTPServer）。 一个异步网络库，包括 IOLoop 和 IOStream 类，它们用作 HTTP 组件的构建模块，也可用于实现其他协议。 一个协程库（tornado.gen），它允许使用比 回调 更直接了当的方式编写异步代码。这类似于 Python 3.5（async def）中引入的 原生协程 功能。建议使用 原生协程 代替 tornado.gen 模块。  Tornado Web 应用框架和 HTTP 服务器一起提供了一个针对 WSGI 的全栈替代方案。虽然也可以在 WSGI 容器（WSGIAdapter）中使用 Tornado Web 框架，或者是使用 Tornado HTTP 服务器作为其他 WSGI 框架（WSGIContainer）的容器，但是这些组合都有其局限性，如果想要充分利用 Tornado 的优势，需要同时使用 Tornado 的 Web 应用框架和 HTTP 服务器。</description>
    </item>
    
    <item>
      <title>Tornado 0102 - 用户指南: 异步和非阻塞 I/O</title>
      <link>/tornado/01-guide/0102-async/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/01-guide/0102-async/</guid>
      <description>异步和非阻塞 I/O（Asynchronous and non-Blocking I/O） 实时 Web 功能需要为每个用户长期保持大部分空闲连接。在传统的同步 Web 服务器中，这意味着要为每个用户投入一个线程，这成本可能非常昂贵。
为了最小化并发连接的成本，Tornado 使用单线程事件循环。这意味着所有应用程序代码都应该是异步和非阻塞的，因为一次只能有一个操作处于活动状态。
异步 和 非阻塞 这两个术语是密切相关的，并且通常可以互换使用，但它们并不完全相同。
阻塞（Blocking） 函数在返回之前等待某事发生时会阻塞（blocks）。一个函数可能由于多种原因而阻塞：网络 I/O、磁盘 I/O、互斥锁等。事实上，每一个函数在运行和使用 CPU 时都会至少有一点阻塞（对于一个极端的例子来说明为什么 CPU 阻塞必须像其他类型的阻塞一样严肃，考虑密码散列函数，如 bcrypt ，它设计使用数百毫秒的 CPU 时间，远远超过典型的网络或磁盘访问）。
一个函数可能在某些方面是阻塞的，而在其他方面是非阻塞的。虽然各种阻塞都要尽量减少，但在 Tornado 的上下文中，我们通常情况是谈论在网络 I/O 上下文中的阻塞。
异步（Asynchronous） 异步函数在它执行完成之前就会返回，并且通常在触发应用程序中的一些未来操作之前，会将某些工作放到后台去执行（相反地，同步函数一定要等到执行完它所有操作才会返回）。异步接口有很多种风格：
 回调参数 返回占位符（Future，Promise，Deferred） 交付队列 回调注册表（例如 POSIX 信号）  无论使用哪种类型的接口，定义的每种异步函数都需要让调用者使用不同的交互方式；没有一种毫无成本的方法可以使同步函数直接变成异步函数，却又对其调用者透明的（像 gevent 这样的系统使用轻量级线程来提供与异步系统相当的性能，但它们实际上并不会使事情变成异步）。
Tornado 中的异步操作通常返回占位符对象（Futures），但一些低级别组件（例如使用回调的IOLoop）除外。Futures 通常会通过 await 或 yield 关键字转换为结果。
Examples 这是一个同步函数示例：
from tornado.httpclient import HTTPClient def synchronous_fetch(url): http_client = HTTPClient() response = http_client.fetch(url) return response.body 这是使用原生协程进行重写的异步函数：</description>
    </item>
    
    <item>
      <title>Tornado 0103 - 用户指南: 协程</title>
      <link>/tornado/01-guide/0103-coroutines/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/01-guide/0103-coroutines/</guid>
      <description>协程（Coroutines） 协程是在 Tornado 中编写异步代码的推荐方法。协程使用 Python await 或 yield 关键字来挂起和恢复执行而不是一系列回调（在 gevent 这样的框架中看到的协作轻量级线程有时也被称为协程，但在 Tornado 中所有协程都使用显式上下文切换并被称为异步函数）。
协程几乎和同步代码一样简单，但不需要花费任何线程成本。它们还通过减少上下文切换可能发生的位置数量，使 并发性 更易于推理。
Example:
async def fetch_coroutine(url): http_client = AsyncHTTPClient() response = await http_client.fetch(url) return response.body 原生协程与装饰器协程（Native vs decorated coroutines） Python 3.5 引入了async 和 await 关键字（使用这些关键字的函数也称为“原生协程（native coroutines）”）。为了与旧版本的 Python 兼容，您可以使用 tornado.gen.coroutine 装饰器来使用“装饰”或“基于 yield ”的协同程序。
尽可能使用原生协程。仅在需要与旧版本的 Python 兼容时才使用修饰器协程。Tornado 文档中的示例通常使用原生形式。
两种形式之间的翻译通常很简单：
# Decorated: # Native: # Normal function declaration # with decorator # &amp;#34;async def&amp;#34; keywords @gen.coroutine def a(): async def a(): # &amp;#34;yield&amp;#34; all async funcs # &amp;#34;await&amp;#34; all async funcs b = yield c() b = await c() # &amp;#34;return&amp;#34; and &amp;#34;yield&amp;#34; # cannot be mixed in # Python 2, so raise a # special exception.</description>
    </item>
    
    <item>
      <title>Tornado 0104 - 用户指南: 队列</title>
      <link>/tornado/01-guide/0104-queues/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/01-guide/0104-queues/</guid>
      <description>队列（Queue） 示例 - 并发 Web 蜘蛛 Tornado 的 tornado.queues 模块为协程实现异步生产者/消费者模式，类似于 Python 标准库的 queue 模块为线程实现的模式。
产生 Queue.get 的协程暂停，直到队列中有项目为止。如果队列设置了最大大小，则会产生 Queue.put 的协程暂停，直到有另一个项目的空间。
Queue 维护未完成任务的计数，从零开始。put 增加计数；task_done 递减它。
在此处的 web-spider 示例中，队列开始仅包含 base_url。当一个 worker 获取一个页面时，它会解析链接并将新的链接放入队列中，然后调用 task_done 来减少一次计数器。最终，一个工作者获取一个页面，其 URL 之前已经被看到，并且队列中也没有剩余的工作。因此，该worker 对task_done 的调用将计数器减少为零。正在等待 join 的主协程已取消暂停并完成。
#!/usr/bin/env python3 import time from datetime import timedelta from html.parser import HTMLParser from urllib.parse import urljoin, urldefrag from tornado import gen, httpclient, ioloop, queues base_url = &amp;#39;http://www.tornadoweb.org/en/stable/&amp;#39; concurrency = 10 async def get_links_from_url(url): &amp;#34;&amp;#34;&amp;#34;Download the page at `url` and parse it for links.</description>
    </item>
    
    <item>
      <title>Tornado 0105 - 用户指南: Tornado Web 应用程序的结构</title>
      <link>/tornado/01-guide/0105-structure/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/01-guide/0105-structure/</guid>
      <description>Tornado Web 应用程序的结构 Tornado Web 应用程序通常由一个或多个 RequestHandler 子类、一个将传入请求路由到处理程序的 Application 对象和一个用于启动服务器的 main() 函数组成。
最小的“hello world”示例如下所示：
import tornado.ioloop import tornado.web class MainHandler(tornado.web.RequestHandler): def get(self): self.write(&amp;#34;Hello, world&amp;#34;) def make_app(): return tornado.web.Application([ (r&amp;#34;/&amp;#34;, MainHandler), ]) if __name__ == &amp;#34;__main__&amp;#34;: app = make_app() app.listen(8888) tornado.ioloop.IOLoop.current().start() 关于 Application 对象 Application 对象负责全局配置，包括将请求映射到处理程序的路由表。
路由表是 URLSpec 对象（或元组）的列表，每个对象包含（至少）一个正则表达式和一个处理程序类（Handler）。 顺序很重要；第一个被匹配到的规则会被优先使用。 如果正则表达式包含捕获组，则这些组是“路径参数”，并将传递给处理程序的 HTTP 方法。 如果字典作为 URLSpec 的第三个元素传递，它将提供将传递给 RequestHandler.initialize 的初始化参数。 最后，URLSpec 可能有一个名称，这将允许它与 RequestHandler.reverse_url 一起使用。
例如，在此片段中，根 URL / 映射到 MainHandler，/story/ 后跟数字的 URL 映射到 StoryHandler。 该数字（作为字符串）传递给 StoryHandler.</description>
    </item>
    
    <item>
      <title>Tornado 0106 - 用户指南: 模板与 UI</title>
      <link>/tornado/01-guide/0106-templates/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/01-guide/0106-templates/</guid>
      <description>模板和UI Tornado 包含一种简单，快速，灵活的模板语言。本节介绍该语言以及国际化等相关问题。
Tornado 也可以与任何其他 Python 模板语言一起使用，尽管没有明确地规定如何将这些系统集成到 RequestHandler.render 中，你只需将模板渲染为字符串并将其传递给RequestHandler.write 就可以了。
配置模板 默认情况下，Tornado 会在与引用它们的 .py 文件相同的目录中查找模板文件。 要将模板文件放在不同的目录中，请使用 template_path 应用程序设置 （如果不同的处理程序具有不同的模板路径，则覆盖 RequestHandler.get_template_path）。
要从非文件系统位置加载模板，请将 tornado.template.BaseLoader 子类化，并将实例作为 template_loader 应用程序设置传递。
默认情况下，编译的模板会被缓存；要关闭此缓存和重新加载模板，以便始终可以看到对底层文件的更改，请使用应用程序设置 compiled_template_cache = False 或 debug = True。
模板语法 Tornado 模板只是 HTML（或任何其他基于文本的格式），其中 Python 控件序列和表达式嵌入在标记中：
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;{{ title }}&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;ul&amp;gt; {% for item in items %} &amp;lt;li&amp;gt;{{ escape(item) }}&amp;lt;/li&amp;gt; {% end %} &amp;lt;/ul&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 如果您将此模板另存为 “template.html” 并将其放在与 Python 文件相同的目录中，则可以使用以下内容呈现此模板：
class MainHandler(tornado.web.RequestHandler): def get(self): items = [&amp;#34;Item 1&amp;#34;, &amp;#34;Item 2&amp;#34;, &amp;#34;Item 3&amp;#34;] self.</description>
    </item>
    
    <item>
      <title>Tornado 0107 - 用户指南: 认证与安全</title>
      <link>/tornado/01-guide/0107-security/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/01-guide/0107-security/</guid>
      <description>认证与安全 Cookies 和 secure cookies 您可以使用 set_cookie 方法在用户的浏览器中设置 cookies：
class MainHandler(tornado.web.RequestHandler): def get(self): if not self.get_cookie(&amp;#34;mycookie&amp;#34;): self.set_cookie(&amp;#34;mycookie&amp;#34;, &amp;#34;myvalue&amp;#34;) self.write(&amp;#34;Your cookie was not set yet!&amp;#34;) else: self.write(&amp;#34;Your cookie was set!&amp;#34;) Cookies 不安全，客户可以轻松修改。如果您需要设置 Cookies，例如，识别当前登录的用户，则需要对 Cookies 进行签名以防止伪造。Tornado 使用 set_secure_cookie 和 get_secure_cookie 方法来支持签名的 Cookies。要使用这些方法，您需要在创建应用程序时指定名为 cookie_secret 的密钥。您可以将应用程序设置作为关键字参数传递给应用程序：
application = tornado.web.Application([ (r&amp;#34;/&amp;#34;, MainHandler), ], cookie_secret=&amp;#34;__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__&amp;#34;) 除了时间戳和 HMAC 签名之外，签名 cookies 还包含 cookies 的编码值。如果 cookies 是旧的或签名不匹配，get_secure_cookie 将返回 None，就像没有设置 cookies 一样。以上示例的安全版本：
class MainHandler(tornado.web.RequestHandler): def get(self): if not self.get_secure_cookie(&amp;#34;mycookie&amp;#34;): self.</description>
    </item>
    
    <item>
      <title>Tornado 0108 - 用户指南: 运行与部署</title>
      <link>/tornado/01-guide/0108-running/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/tornado/01-guide/0108-running/</guid>
      <description>运行和部署 由于 Tornado 提供自己的 HTTPServer，因此运行和部署它与其他 Python Web 框架略有不同。您可以编写一个启动服务器的 main() 函数，而不是配置 WSGI 容器来查找应用程序：
def main(): app = make_app() app.listen(8888) IOLoop.current().start() if __name__ == &amp;#39;__main__&amp;#39;: main() 配置操作系统或进程管理器以运行此程序以启动服务器。请注意，可能需要增加每个进程的打开文件数（以避免“打开太多文件”-Error）。要提高此限制（例如将其设置为50000），您可以使用 ulimit 命令，修改 /etc/security/limits.conf 或在 supervisord 配置中设置 minfds。
进程和端口 由于Python GIL（全局解释器锁），有必要运行多个 Python 进程以充分利用多 CPU 机器。通常，每个 CPU 最好运行一个进程。
Tornado 包含一个内置的多进程模式，可以同时启动多个进程。这需要对标准主要功能稍作改动：
def main(): app = make_app() server = tornado.httpserver.HTTPServer(app) server.bind(8888) server.start(0) # forks one process per cpu IOLoop.current().start() 这是启动多个进程并使它们共享同一端口的最简单方法，尽管它有一些限制。首先，每个子进程都有自己的 IOLoop，因此在 fork 之前没有任何东西触及全局 IOLoop 实例（甚至间接）是很重要的。 其次，在此模型中很难进行零停机更新。最后，由于所有进程共享同一个端口，因此单独监视它们更加困难。
对于更复杂的部署，建议单独启动进程，并让每个进程侦听不同的端口。supervisord 的 “process groups” 功能是安排此功能的一种好方法。当每个进程使用不同的端口时，通常需要外部负载均衡器（如 HAProxy 或 nginx）向外部访问者提供单个地址。</description>
    </item>
    
  </channel>
</rss>