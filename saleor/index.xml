<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Saleors on Jeremy&#39;s blog</title>
    <link>/saleor/</link>
    <description>Recent content in Saleors on Jeremy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Thu, 19 Apr 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/saleor/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Saleor 01: 入门 - 在 macOS 上安装</title>
      <link>/saleor/getting-started/01_installation-macos/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/getting-started/01_installation-macos/</guid>
      <description>准备工作 在正式运行 Saleor 之前，需要在电脑上安装一些额外软件。
Node.js 建议是 Version 8 或更高版本。
Node.js downloads page
PostgreSQL 运行 Saleor 需要 PostgreSQL version 9.4 或更高版本。
PostgreSQL download page
你一定要记住在安装的时候所设定的管理员密码。
Command Line Tools for Xcode 下载并安装最新版本的 &amp;ldquo;Command Line Tools (macOS 10.x) for Xcode 9.x&amp;rdquo;.
Downloads for Apple Developers page
然后运行：
$ xcode-select --install Homebrew 运行下面的命令安装 Homebrew:
$ /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; Python 3 使用 Homebrew 安装最新版本的 Python 3:
$ brew install python3 Git 使用 Homebrew 安装 Git:</description>
    </item>
    
    <item>
      <title>Saleor 02: 入门 - 在 Windows 上安装</title>
      <link>/saleor/getting-started/02_installation-windows/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/getting-started/02_installation-windows/</guid>
      <description>我们在 64-bit Windows 系统上进行安装
准备工作 在正式运行 Saleor 之前，需要在电脑上安装一些额外软件。
Python 下载最新的 3.6 版 Windows 安装包，然后根据说明进行安装。
Python download page
记得勾选 &amp;ldquo;Add Python 3.6 to PATH&amp;rdquo;
Node.js 建议是 Version 8 或更高版本。
Node.js downloads page
记得勾选 &amp;ldquo;Add to PATH&amp;rdquo;
PostgreSQL 运行 Saleor 需要 PostgreSQL version 9.4 或更高版本。
PostgreSQL download page
你一定要记住在安装的时候所设定的管理员密码。
GTK+ 下载 64-bit Windows installer
记得勾选 &amp;ldquo;Set up PATH environment variable to include GTK+&amp;rdquo;
Compilers 下载并安装最新版本的 Visual C++ build tools.
安装   克隆这个仓库 （或是使用你自己的副本）：</description>
    </item>
    
    <item>
      <title>Saleor 03: 入门 - 在 Linux 上安装</title>
      <link>/saleor/getting-started/03_installation-linux/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/getting-started/03_installation-linux/</guid>
      <description>如果你偏向于使用容器服务或者是对配置 PostgreSQL, Redis and Elasticsearch 存在问题，可以尝试 Using Docker for Development 相关教程。
准备工作 在正式运行 Saleor 之前，需要在电脑上安装一些额外软件。
Python 3 Saleor 建议使用 Python 3.4 或者更高版本。大多数 Linux 系统都有一个内置已经安装好的版本，但是如果不是，那就要去了解下如何安装 Python 3.6.
Node.js 建议是 Version 8 或更高版本。
查看 installation instructions.
Note
Debian 和 Ubuntu 用户使用系统安装包进行安装 Node.js 的话依然还需要安装 nodejs-legacy
PostgreSQL 运行 Saleor 需要 PostgreSQL version 9.4 或更高版本。
PostgreSQL download page
你一定要记住在安装的时候所设定的管理员密码。
GTK+ 有一些功能，比如“创建 PDF”，需要额外的系统库支持。
Debian / Ubuntu Debian 9.0 Stretch 或以上, Ubuntu 16.04 Xenial 或以上:
$ sudo apt-get install build-essential python3-dev python3-pip python3-cffi libcairo2 libpango-1.</description>
    </item>
    
    <item>
      <title>Saleor 04: 入门 - 设置</title>
      <link>/saleor/getting-started/04_configuration/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/getting-started/04_configuration/</guid>
      <description>我们是 12factor 方法和可移植代码的粉丝， 所以你仅仅使用环境变量就可以设置 Saleor 的大多数配置项。
环境变量   ALLOWED_HOSTS
控制 Django&amp;rsquo;s allowed hosts 设置，默认是 localhost。使用英文逗号分隔多个值。
  CACHE_URL or REDIS_URL
缓存数据库地址，默认是系统内存。我们推荐使用 Redis，Heroku 的 Redis 会自动导出这个配置。
Example: redis://redis.example.com:6379/0
Warning
如果你计划使用不止一个 WSGI 进程（或运行多个服务器/容器），则需要使用共享缓存服务器。否则，每个进程将拥有自己的每个用户会话的版本，这将导致用户被注销并丢失购物车。
  DATABASE_URL
默认是本地 PostgreSQL 实例。查看 Using Docker for Development 了解如何在 Docker container 里面运行本地数据库。
大多数 Heroku 的数据库都会自动导出这个设置。
Example: postgres://user:password@psql.example.com/database
  DEBUG
控制 Django&amp;rsquo;s debug mode 默认是 True
  DEFAULT_FROM_EMAIL
电子邮件的默认发件人
  EMAIL_URL
电子邮件网关地址。默认是打印输出所有信息到终端。
Example: smtp://user:password@smtp.example.com:465/?ssl=True</description>
    </item>
    
    <item>
      <title>Saleor 05: 入门 - 创建一个管理员账户</title>
      <link>/saleor/getting-started/05_superuser/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/getting-started/05_superuser/</guid>
      <description>Saleor 是基于 Django 开发的，所以你可以使用下面的命令来创建管理员账户
$ python manage.py createsuperuser 按照提示提供您的电子邮件地址和密码。
然后你就可以启动本地服务并访问 http://localhost:8000/dashboard/ 登录到后台管理界面。
请注意，以这种方式创建用户会使其成为“超级用户”状态，这意味着无论分配给哪个组，它们都具有所有权限。</description>
    </item>
    
    <item>
      <title>Saleor 06: 入门 - 调试工具</title>
      <link>/saleor/getting-started/06_dev-tools-2/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/getting-started/06_dev-tools-2/</guid>
      <description>我们内建了一些调试工具。
Django debug toolbar 如果 Django 是运行在 debug 模式下，Django Debug Toolbar 就是开启的。
Silk Silk 开启与否可以通过环境变量来控制
 ENABLE_SILK
控制 django-silk. 默认是 False    设置环境变量
$ export ENABLE_SILK=&amp;#39;True&amp;#39;   从 requirements_dev.txt 安装库:
$ python -m pip install -r requirements_dev.txt   重启服务
  </description>
    </item>
    
    <item>
      <title>Saleor 07: 入门 - 测试数据</title>
      <link>/saleor/getting-started/07_example-data/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/getting-started/07_example-data/</guid>
      <description>如果您想要一些数据来测试您的新店面，您可以使用示例产品和订单填充数据库：
$ python manage.py populatedb </description>
    </item>
    
    <item>
      <title>Saleor 08: 开发定制 - 使用 Docker 进行开发</title>
      <link>/saleor/customization/08_docker/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/08_docker/</guid>
      <description>使用Docker构建软件，您可以运行和测试代码，而无需担心外部依赖性，如缓存服务器和数据库。
Warning
以下设置仅用于本地开发。请参阅 Docker 以获取 Docker 在生产环境的使用说明。
本地准备工作 在执行以下步骤之前，您需要安装 Docker 和 docker-compose 。
要构建资源库，您需要 node 和 webpack module bundler
Warning
我们的配置公开了 PostgreSQL，Redis 和 Elasticsearch 端口。如果由于端口冲突而运行此 Docker 文件时遇到问题，可以从 docker-compose.yml 文件中删除关于 &amp;lsquo;ports&amp;rsquo; 的部分。
用法   安装 JavaScript 依赖：
$ npm install   准备静态资源库 assets:
$ npm run build-assets   创建 email:
$ npm run build-emails   使用 docker-compose 创建容器：
$ docker-compose build   准备数据库：
$ docker-compose run web python manage.</description>
    </item>
    
    <item>
      <title>Saleor 09: 开发定制 - 自定义模版</title>
      <link>/saleor/customization/09_templates/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/09_templates/</guid>
      <description>商店前端模版默认是基于 [Bootstrap 4
你可以在 /templates/ 文件下找到全部文件。</description>
    </item>
    
    <item>
      <title>Saleor 10: 开发定制 - 自定义邮件</title>
      <link>/saleor/customization/10_emails/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/10_emails/</guid>
      <description>发送邮件 邮件是使用 Django-Templated-Email 进行发送的。
自定义邮件模版 电子邮件模板在 templates/templated_email 中，它有两个子目录。 source 包含 *.email 和 *.mjml 文件，彼此相邻，按应用程序名称分组。 这些 MJML 文件被编译为 *.html 并放入 compiled 目录。
在 *.email 中的普通电子邮件通过引用编译的 *.html 文件来包含 HTML 版本。
编译 MJML 源电子邮件使用 MJML ，并且在使用之前必须编译为HTML。
要编译邮件的话就运行命令：
$ npm run build-emails </description>
    </item>
    
    <item>
      <title>Saleor 11: 开发定制 - 自定义 CSS 和 JavaScript</title>
      <link>/saleor/customization/11_frontend/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/11_frontend/</guid>
      <description>所有的静态资源文件都在 /saleor/static/ 的子目录下面。
样式表是使用 Sass 写的，使用 postcss 和 autoprefixer 来支持跨浏览器兼容性。
JavaScript 代码是按 ES2015 标准写的， 使用 Babel 进行转换和补充浏览器兼容性。
一切都是使用 webpack module bundler 进行编译。
最终生成的文件都输出到 /saleor/static/assets/ ，你不要手动去编辑它们。
webpack 会自动监测到本地文件的修改，这在开发过程中有非常大的好处。 在调试阶段，这同时开启非常有用的 source maps
To run webpack in watch mode run:
$ npm start Warning
使用上面这种方式创建的文件并不是完全可以在生产环境下直接使用的，要使用下面的命令进行操作：
$ npm run build-assets --production </description>
    </item>
    
    <item>
      <title>Saleor 12: 开发定制 - 编写 Python 代码</title>
      <link>/saleor/customization/12_backend/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/12_backend/</guid>
      <description>管理依赖库 为了保证可重复安装，所有项目依赖性都使用 pip-tools 进行管理。 项目的直接依赖关系列在 requirements.in 中，并且运行 pip-compile 生成所有版本固定的 requirements.txt 。
我们建议您使用此工作流程并在版本控制下保留 requirements.txt ，以确保所有计算机和环境都运行完全相同的代码。</description>
    </item>
    
    <item>
      <title>Saleor 13: 开发定制 - 国际化</title>
      <link>/saleor/customization/13_i18n/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/13_i18n/</guid>
      <description>从 Transifex 获取翻译文件 首先要确保你已经安装了 Transifex 命令行客户端:
$ pip install transifex-client 然后使用 pull 命令获取翻译文件:
$ tx pull Note
要为新创建的翻译建立目录你需要在使用 tx pull 命令的时候带上 --all 标志。
编译消息目录 要想看到 Django 的翻译，这一步是必须要的.
$ python manage.py compilemessages 提取消息进行翻译 这将使用代码中显示的消息更新英文文件。
对于后端代码和模板：
$ python manage.py makemessages -l en --extension=email,html,py,txt --ignore=&amp;#34;templates/templated_email/compiled/*&amp;#34; 对于 JavaScript 代码：
$ python manage.py makemessages -l en -d djangojs --ignore=&amp;#34;_build/*&amp;#34; --ignore=&amp;#34;node_modules/*&amp;#34; </description>
    </item>
    
    <item>
      <title>Saleor 14: 开发定制 - 运行测试</title>
      <link>/saleor/customization/14_tests/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/14_tests/</guid>
      <description>在对代码进行任何永久更改之前，应确保它们不会破坏现有功能。
该项目目前只包含很少的前端代码，因此测试套件仅涵盖后端代码。
要运行后端测试，请使用 pytest:
$ py.test 您还可以测试所有支持的 Django 和 Python 版本。 这通常只有在您想要将更改回送给 Saleor 时才需要。 要做到这一点，你可以使用 Tox:
$ tox </description>
    </item>
    
    <item>
      <title>Saleor 15: 开发定制 - 持续集成</title>
      <link>/saleor/customization/15_ci/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/15_ci/</guid>
      <description>商店附带一个可工作的 CircleCI 配置文件。 要使用它，请登录您的 CircleCI 帐户并启用您的存储库。</description>
    </item>
    
    <item>
      <title>Saleor 16: 开发定制 - 与 PyPy 3.5 配合使用</title>
      <link>/saleor/customization/16_pypy/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/customization/16_pypy/</guid>
      <description>Saleor 可以很好地与 PyPy 3.5 配合使用，并且在需要额外的性能时可以使用它。
默认的 PostgreSQL 驱动程序与 PyPy 不兼容，所以您需要用基于 cffi 的驱动程序替换它。
请参阅 psycopg2cffi 提供的安装说明。</description>
    </item>
    
    <item>
      <title>Saleor 17: 参与我们 - 编辑器配置</title>
      <link>/saleor/contributing/17_editorconfig/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/contributing/17_editorconfig/</guid>
      <description>EditorConfig 是一个标准配置文件，旨在确保跨多种编程环境的一致风格。
Saleor 的存储库包含一个 .editorconfig file 文件，它描述了我们的格式要求。
大多数编辑器和IDE都直接或通过插件支持该文件。 请参阅 list of supported editors and IDEs 以获取相关说明。
请确保您的编程环境尊重此文件的内容，并且您将自动获得正确的缩进，编码和行尾。</description>
    </item>
    
    <item>
      <title>Saleor 18: 参与我们 - 编码风格</title>
      <link>/saleor/contributing/18_coding-style/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/contributing/18_coding-style/</guid>
      <description>Python 始终遵循 PEP 8 ，但请记住，一致性非常重要。
String Literals 优先使用单引号加双引号，除非字符串本身包含需要不必要地转义的单引号。
Wrapping Code When wrapping code follow the “hanging grid” format:
some_dict = { &amp;#39;one&amp;#39;: 1, &amp;#39;two&amp;#39;: 2, &amp;#39;three&amp;#39;: 3} some_list = [ &amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;] Python是一种基于缩进的语言，我们相信漂亮，可读的代码比保存一行 git diff  更重要。 即使 Django 项目似乎鼓励这种编程风格，请避免使用括号，括号，方括号或悬挂逗号。下面这种是错误的做法：
this_is_wrong = { &amp;#39;one&amp;#39;: 1, &amp;#39;two&amp;#39;: 2, &amp;#39;three&amp;#39;: 3, } 请在括号后立即打破多行代码，并避免依赖精确数量的空格进行对齐，下面这种做法也是错误的：
also_wrong(&amp;#39;this is hard&amp;#39;, &amp;#39;to maintain&amp;#39;, &amp;#39;as it often needs to be realigned&amp;#39;) Linters 使用 isort 来维护一致的进口。
使用 pylint 与 pylint-django 插件来捕获代码中的错误。</description>
    </item>
    
    <item>
      <title>Saleor 19: 参与我们 - 命名约定</title>
      <link>/saleor/contributing/19_naming/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/contributing/19_naming/</guid>
      <description>为了保持一致的代码结构，我们在命名文件时遵循一些规则。
Python Modules 试着让名字反映文件的功能。 如果可能的话，避免使用通用文件名，例如 utils.py.
Django Templates 使用下划线作为字词分隔符。
Static Files 使用破折号分隔单词，因为它们最终会成为 URL 的一部分。</description>
    </item>
    
    <item>
      <title>Saleor 20: 架构 - 处理钱的金额</title>
      <link>/saleor/architecture/20_money/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/20_money/</guid>
      <description>Saleor 使用 Prices 和 django-prices 库去存储、计算和显示金额、价格与范围。
默认货币 所有价格都输入并存储在由 [DEFAULT_CURRENCY 设置] 控制的单一默认货币中。Saleor 可以以用户本地货币显示价格 （参阅 [Open Exchange Rates integration]），但所有采购均以默认货币收取。
Warning
货币不存储在数据库中。在生产环境中更改默认货币不会重新计算任何现有订单。所有数字将保持不变，并且会被错误地显示为新货币。
Money 和 TaxedMoney 在 Saleor 的代码库中，金额存在 Money 或 TaxedMoney 实例。
Money 是以特定货币表示金额的类型：100 USD 是由 Money(100, &amp;lsquo;USD&amp;rsquo;) 表示。这种类型不包含对商业有用的任何附加信息，但是与 Decimal 不同，它实施保护和检查以计算和比较货币价值。Money amounts 使用 MoneyField 存储在 model 上，MoneyField 提供货币和储值金额的自己的安全检查。如果您需要使用 Money 对象的 Decimal （十进制数字），您可以在 amount 属性中找到它。
Products （产品）和 shipping methods prices （运输方式价格）使用 MoneyField 进行存储，并假定为 gross amounts （总额）。然后使用 TaxedAmount（net = item.price，gross = item.price）方法将这些金额转换为 TaxedMoney 对象，然后在解决项目的最终价格（税前和折扣前）进行转换。
Note</description>
    </item>
    
    <item>
      <title>Saleor 21: 架构 - 产品结构</title>
      <link>/saleor/architecture/21_products/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/21_products/</guid>
      <description>在为您的商店填充产品之前，我们需要介绍 3 种产品概念：产品类型 product types ，产品 products ，产品变体 product variants 。
概述 设想你有一家书店。 你的其中一个产品 products 一本名为“Saleor 简介”的书。
这本书的封面有分为硬壳和软壳，所以会有两种产品变体 product variants 。
封面类型是在我们的商店中创建单独变体的唯一属性，因此我们使用“Book”作为产品类型 product type ，为它启用变体并使用“Cover type”作为变体属性 variant attribute 。
Class Diagram 产品变体（Product Variants） 变体是你店里最重要的物品。所有购物车和库存操作都使用变体。即使产品没有多种变体，商店也会在后台创建一个。
产品（Products） 介绍几个产品变体 product variants 的常见细节。当商店显示类别视图时，列表中的项目是不同的产品 products 。如果变体没有重写属性（例如：价格），则从产品 products 中获取默认值。
  available_on
在此日期之前，该产品未在店面中列出，且用户不可用。
  is_featured
特色产品显示在首页
  产品类型（Product Types） 将类型看作您的产品的模板。多个 产品 products 可以使用相同的产品类型 product type。
  product_attributes
所有 产品变体 product variants 之间共享的属性。例如：发布者，所有书籍变体都由同一家公司出版。
  variant_attributes</description>
    </item>
    
    <item>
      <title>Saleor 22: 架构 - 缩略图</title>
      <link>/saleor/architecture/22_thumbnails/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/22_thumbnails/</guid>
      <description>Saleor 使用 VersatileImageField 替换了 Django 的 ImageField 。出于性能原因，在非调试模式下，缩略图由工作者的任务系统预先生成，在保存实例后触发。访问丢失的图像将导致404错误。
在调试模式下，按需生成缩略图。
手动生成产品缩略图 为所有 ProductImage 实例创建缺失的缩略图。
$ python manage.py create_thumbnails 删除图像 Image 实例不会自动删除图像格式，主图像也不会自动删除。有关删除图像的更多信息，请参见 VersatileImageField 文档</description>
    </item>
    
    <item>
      <title>Saleor 23: 架构 - 库存管理</title>
      <link>/saleor/architecture/23_stock/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/23_stock/</guid>
      <description>每个产品型号都有一个库存单位（SKU）。
每个变体保存了关于“数量”的相关信息，总库存数量 quantity 包括分配给已经生成的订单的已分配数量 quantity allocated 和可用数量 quantity available 。
Example: 有五盒鞋子。其中三个已经出售给客户，但尚未处理发货。总库存数量 quantity 为 5，已分配数量 quantity allocated 为 3，可用数量 quantity available 为 2。
每个变体也有一个成本价格（您的商店必须支付才能拿得到货的价格，可以理解为采购价）。
产品可用性（Product Availability） 如果一个变体还有未分配的库存数量，则它就表示是有货的。
可订购的最高数量是产品变体中的可用数量 quantity available。
为新订单分配库存（Allocating Stock for New Orders） 一旦下订单，完成每个订单行所需的数量立即标记为已分配。
Example: 一位顾客又下了一盒鞋子的订单。总库存数量 quantity 是 5, 已分配数量 quantity allocated 现在就是 4 ，然后可用数量 quantity available 就变成了 1.
发货后减少库存（Decreasing Stock After Shipment） 一旦交付组（可以理解为发货单）被标记为发货，这个发货单里面的每条记录所对应的产品变体将手头的数量和分配的数量都减少了出货的数量。
Example: A 仓库的两箱鞋子被运送给客户。总库存数量 quantity 现在就是 3，已分配数量 quantity allocated 则变为 2，可用数量 quantity available 依然是 1。</description>
    </item>
    
    <item>
      <title>Saleor 24: 架构 - 订单管理</title>
      <link>/saleor/architecture/24_orders/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/24_orders/</guid>
      <description>订单是在客户完成结账流程后创建的。订单对象本身仅包含客户订单的一些基本信息。
履行（Fulfillment）（可以理解为发货与发货单） 履行代表一组带有相应跟踪编号的装运物品。履行是由商店经营者创建的，以便在所订购的订单中标记选定的产品已被履行。
有两种可能的履行状态：
  NEW
新创建履行的默认状态。
  CANCELED
履行由商店操作员取消。这一行动是不可逆转的。
  订单状态（Order statuses） 根据其履行情况，有四种可能的订单状态：
  UNFULFILLED
没有与订单相关的履行或每一个履行都被取消。需要店铺操作员采取行动才能继续订单处理。
可以理解为还未发货
  PARTIALLY FULFILLED
有一些履行 FULFILLED 状态与订单有关。需要店铺操作员采取行动才能继续订单处理。
可以理解为部分发货
  FULFILLED
每个订单行都在现有履行中完成。订单不需要店铺经营者的进一步行动。
可以理解为发货完成
  CANCELED
订单已被取消。每个履行（如果有的话）都具有 CANCELED 状态。订单不需要店铺经营者的进一步行动。
  还有 DRAFT （草稿）状态，用于从订单后台新创建并尚未发布的订单。这个操作一般用于客服售后流程。</description>
    </item>
    
    <item>
      <title>Saleor 25: 架构 - 国际化</title>
      <link>/saleor/architecture/25_i18n/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/25_i18n/</guid>
      <description>默认情况下，语言和语言环境是根据 Web 浏览器提供的首选项列表确定的。GeoIP 用于确定访问者的国家和当地货币。
Note
Saleor 使用 Transifex 协调翻译。如果您希望提供帮助，请前往 translation dashboard
所有翻译都由社区处理。所有翻译团队都是开放的，欢迎所有人申请一种新语言。
翻译（Translation） Saleor 使用 gettext 翻译。这是翻译软件的行业标准，也是翻译 Django 应用程序的最常用方法。
Saleor 的店面和管理后台都准备好翻译。他们使用单独的翻译域名，可以单独翻译。所有翻译都提供准确的上下文描述，使翻译更容易。
目前无法翻译数据库内容（如产品说明），但计划在未来版本中使用。
本土化（Localization） 数据格式（Data formats） Saleor使用 Babel 作为 Unicode 的 CLDR 库的接口，以提供准确的数字和日期格式以及适当的货币名称。
地址表格（Address forms） Google’s address format database 用于提供特定于语言环境的地址格式和表单。它还负责地址验证，因此您不必知道如何向中国递送包裹或阿拉伯联合酋长国是否使用邮政编码（他们不会）。
货币转换（Currency conversion） Saleor可以使用货币汇率数据来显示访客本地货币的价格估算值。请参阅 Open Exchange Rates 以了解如何设置 Open Exchange Rates。
电话号码格式（Phone numbers format） Saleor 使用 Google’s libphonenumber library 来确保提供的数字是正确的。您需要选择前缀并单独键入号码。无论选择哪个国家，您都可以输入属于任何其他国家/地区格式的电话号码。</description>
    </item>
    
    <item>
      <title>Saleor 26: 架构 - 搜索</title>
      <link>/saleor/architecture/26_search/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/26_search/</guid>
      <description>Saleor 有两种搜索机制。
默认是使用 PotsgreSQL。这是一个相当通用的解决方案，不需要任何额外的资源。
如果 Elasticsearch 服务器可用，则可以启用更复杂的搜索后端。Elasticsearch 提供了许多高级功能，例如提高查询的相关性或“more like this”的查询。查看 Elasticsearch官方网站，了解更多关于其功能的信息。请注意，启用Elasticsearch 后端目前不支持 Saleor 中的任何其他功能。
有关安装和配置说明，请参阅 Elasticsearch。</description>
    </item>
    
    <item>
      <title>Saleor 27: 架构 - 支付</title>
      <link>/saleor/architecture/27_payments/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/27_payments/</guid>
      <description>支持的网关（Supported Gateways） Saleor 使用 django-payments 库来处理付款。
默认配置使用虚拟后端。这意味着开发人员可以轻松模拟不同的付款结果。
以下是支持的支付提供商列表：
 Authorize.Net Braintree Coinbase Cybersource Dotpay Google Wallet PayPal Sage Pay Sofort.com Stripe  请注意，此列表仅供参考。请咨询 django-payments documentation 以获得最新的列表和说明。
Note
所有付款后端默认使用沙盒模式。这对于开发非常有用，但确保在部署到生产服务器时使用生产模式。
3-D Secure 3-D Secure 是一种卡保护协议，允许商家部分减轻欺诈责任。实际上，它大大降低了退款的可能性。
Saleor 支持 3-D Secure 但是否使用取决于付款处理器和正在使用的卡。
欺诈保护（Fraud Protection） 一些支付后端提供了自动欺诈保护启发式。如果此类信息可用，Saleor 会将其显示在订单管理面板中。
授权和捕获（Authorisation and Capture） 部分支付后端支持预授权支付。详情请参阅 django-payments documentation。
授权和捕获是一个两步过程。
首先，资金被锁定在付款人的账户上，但不会转移到您的银行。
然后根据提供商和卡的类型，您可能需要几天到一个月的时间才从卡上进行扣钱，金额不超过授权金额。
当订单准备好后才能确定准确的价格时，这非常有用。如果您的企业更喜欢手动筛选企图欺诈的订单，这也很有用。
使用预授权付款查看订单时，Saleor 将提供选项以捕捉或释放资金。
退款（Refunds） 您可以针对所有收取的付款进行部分或全部退款。当您修改订单并删除 Saleor 将提供的物品时，系统会自动发出部分退款。</description>
    </item>
    
    <item>
      <title>Saleor 28: 架构 - 网站设置</title>
      <link>/saleor/architecture/28_settings/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/28_settings/</guid>
      <description>网站设置模块允许您从管理后台更改常见的商店设置，如店铺名称或域名。通过从 SITE_SETTINGS_ID 变量中选择 pk 确定设置对象。
情境处理器 感谢 saleor.site.context_processors.settings 您可以通过 settings 变量访问模板中的网站设置。</description>
    </item>
    
    <item>
      <title>Saleor 29: 架构 - 页面</title>
      <link>/saleor/architecture/29_page/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/architecture/29_page/</guid>
      <description>设置自定义页面 您可以在后台管理的“页面”（Pages）菜单中设置页面，如“关于我们”或“重要通告！”。请注意，如果您不是管理员，则需要加入拥有相应权限的用户组。
在店面中引用页面 如果您想要在店面中添加最近创建的页面的链接，则只需将以下代码放入：
&amp;lt;a href=&amp;#34;{% url &amp;#34;page:details&amp;#34; slug=&amp;#34;terms-of-service&amp;#34; %}&amp;#34;&amp;gt;服务条款&amp;lt;/a&amp;gt; 在相应的模板中。</description>
    </item>
    
    <item>
      <title>Saleor 30: 集成 - 搜索引擎优化（SEO）</title>
      <link>/saleor/integrations/30_seo/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/integrations/30_seo/</guid>
      <description>在某些方面，Saleor 会自动处理搜索引擎如何查看和索引您的产品，开箱即用。
站点地图（Sitemaps） 在 /sitemap.xml URL 下，这个可访问的特殊资源以所有主要搜索引擎最易于解析的 Sitemaps XML 格式提供您网站上的产品、类别和集合的最新列表。
元标记（Meta Tags） Meta 关键字并未被使用，因为它被引入后的这几年被滥用，因为它们被所有主要搜索引擎忽略。
元描述将被设置为产品的描述字段。这不会影响搜索引擎的排名，但会影响显示的搜索结果中的文本片段。
机器人元标记（Robots Meta Tag） （这里机器人一般指搜索引擎的自动化爬虫。）
机器人 meta 标签利用特定于页面的方式来控制如何将单个页面编入索引并提供给搜索结果中的用户。
我们限制了信息中心管理面板的抓取和索引，无内容页面（例如购物车，注册，登录）不会被抓取。
结构化数据（Structured Data） 主页和产品页面包含 JSON-LD 结构化数据 格式的语义描述。
它不直接影响搜索引擎排名，但它允许搜索引擎更好地理解数据（“这是一款产品，它是可用的，它的价格为10美元）”。
它允许像谷歌这样的搜索引擎显示产品照片，价格，可用性，评级等，以及他们的搜索结果。
Nofollow 链接（Nofollow links） 搜索引擎抓取工具无法在您的网站上登录或注册成为会员，也没有理由邀请他们按照“在此注册”或“登录”链接进行操作，因为这些链接几乎没有任何有价值的内容。
这将优化抓取工具在网站上花费的时间，从而让它有时间去索引更多与内容相关的页面。</description>
    </item>
    
    <item>
      <title>Saleor 31: 集成 - 社交媒体优化（SMO）</title>
      <link>/saleor/integrations/31_smo/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/integrations/31_smo/</guid>
      <description>打开图表 为了更有效和高效参与社交媒体，我们在主页和所有的产品/类别中添加了 [Open Graph Protocol](The Open Graph protocol) 。
Open Graph meta 标签可以控制在社交媒体上分享页面时显示的内容（描述，标题，网址，照片等），从而将您的网页转变为社交图表中的丰富对象。</description>
    </item>
    
    <item>
      <title>Saleor 32: 集成 - 电子邮件标记</title>
      <link>/saleor/integrations/32_emailmarkup/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/integrations/32_emailmarkup/</guid>
      <description>Saleor 使用 schema.org 标记来突出显示电子邮件中最重要的信息，并允许用户轻松地与其进行交互。 订单确认电子邮件 将显示为交互式摘要卡片。
电子邮件标记是默认启用的，但在您 向Google注册 之前，您的客户不会看到它。</description>
    </item>
    
    <item>
      <title>Saleor 33: 集成 - Elasticsearch 搜索</title>
      <link>/saleor/integrations/33_elasticsearch/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/integrations/33_elasticsearch/</guid>
      <description>安装 Elasticsearch 搜索后端需要 Elasticsearch 服务器。为了开发目的，docker-compose 将创建一个运行Elasticsearch 服务器实例的 Docker 容器。
可以使用一组环境变量来配置集成。当您在 Heroku 上部署时，您可以使用提供 Elasticsearch 作为服务的附加组件。默认情况下，Saleor 使用Elasticsearch 5.4.3。
如果您正在其他地方部署，则可以使用以下服务之一：
  http://www.searchly.com/ https://www.elastic.co/cloud   环境变量   ELASTICSEARCH_URL或 BONSAI_URL 或 SEARCHBOX_URL
elasticsearch 引擎的网址。如果它是空的 - 搜索将不可用。例： https://user:password@my-3rdparty-es.com:9200
  数据索引 Saleor 使用的Django Elasticsearch DSL 作为用于包装 Elasticsearch DSL 启用自动索引和同步。索引在文档文件中定义。请参考上述项目的文件以获得进一步的帮助。
初始搜索索引可以使用以下命令创建：
$ python manage.py search_index --rebuild 默认情况下，每次更改索引对象（产品，用户，订单）都会重新编制索引。
搜索集成架构 搜索后端使用 Elasticsearch DSL 在saleor / search / backends中查询定义。
为 elasticsearch 集成，店面和管理后台定义了两个后端。店面搜索仅使用店面索引进行产品搜索，管理后台后端也在用户和订单索引中执行其他搜索。
测试 搜索功能有两个级别的测试。Elasticsearch 查询的语法由后端的单元测试来保证，集成测试使用 VCR.py 来模拟外部通信。如果搜索逻辑被修改，请确保记录新的通信并相应地调整测试流程！Pytest将在 CI 的永久记录模式下运行 VCR 以确保没有尝试进行通信，因此请确保最新的卡带始终包含在您的存储库中。</description>
    </item>
    
    <item>
      <title>Saleor 34: 集成 - 谷歌分析</title>
      <link>/saleor/integrations/34_googleanalytics/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/integrations/34_googleanalytics/</guid>
      <description>由于欧盟法律规定，Saleor 不会默认使用任何追踪 cookie。
不过，我们使用 Google Analytics Measurement Protocol 支持服务器端 Google Analytics 。
这是使用 google-measurement-protocol ，不使用 cookie，但代价是不会报告无法追踪服务器端的东西，如地理定位和屏幕分辨率。
为了让它工作，你需要导出下面的环境变量：
  GOOGLE_ANALYTICS_TRACKING_ID
您的信息页的Google “跟踪 ID”。
  ​
  ​
  </description>
    </item>
    
    <item>
      <title>Saleor 35: 集成 - 谷歌零售</title>
      <link>/saleor/integrations/35_googleforretail/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/integrations/35_googleforretail/</guid>
      <description>Saleor 有用于生成产品 Feed 的工具，可用于 Google Merchant Center。最终文件被压缩成 CSV 并保存在 saleor.data_feeds.google_merchant.FILE_PATH 变量所指定的位置。
要生成 Feed 使用命令：
$ python manage.py update_feeds 建议定期运行此命令。
Merchant Center 很少有国家/地区相关设置，因此请在 Google 信息中心验证您的 Feed。您还可以在那里指定您的运费，这是许多国家/地区必需的 Feed 参数。在 Google Support pages 可以找到更多信息。
Google 所需的其中一项字段是品牌属性。Feed 生成器会在变体属性中对品牌或发布商进行检查（如果没有，则会去产品里面找）。
Feed 可以从这个网址下载：http://&amp;lt;yourserver&amp;gt;/feeds/google/</description>
    </item>
    
    <item>
      <title>Saleor 36: 集成 - 汇率转换</title>
      <link>/saleor/integrations/36_openexchangerates/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/integrations/36_openexchangerates/</guid>
      <description>这种整合将使您的客户能够以当地货币查看产品价格。当地价格仅作为估算提供，客户仍按商店的默认货币收费。
在开始之前，您需要一个 Open Exchange Rates account。除非您需要每天多次更新汇率，否则免费订阅计划应该足够了，当然也可以考虑为 Open Exchange Rates 提供的优质服务购买付费方案。首先去注册并创建一个“App ID”。
导出以下环境变量：
  OPENEXCHANGERATES_API_KEY
您商店的开放式汇率“应用程序ID”。
  要更新汇率，至少每天运行一次以下命令：
$ python manage.py update_exchange_rates --all Note
Heroku 用户可以使用 Scheduler add-on 在预定义的时间每天自动调用该命令。</description>
    </item>
    
    <item>
      <title>Saleor 37: 部署 - Docker</title>
      <link>/saleor/deployment/37_docker/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/deployment/37_docker/</guid>
      <description>您需要先安装 Docker。
在构建镜像之前，请确保您准备好了用于生产环境的所有前端资源文件：
$ npm run build-assets --production $ npm run build-emails $ python manage.py collectstatic 然后使用 Docker 构建镜像：
$ docker build -t mystorefront . </description>
    </item>
    
    <item>
      <title>Saleor 38: 部署 - Heroku</title>
      <link>/saleor/deployment/38_heroku/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/deployment/38_heroku/</guid>
      <description>配置（Configuration） $ heroku create --buildpack https://github.com/heroku/heroku-buildpack-nodejs.git $ heroku buildpacks:add https://github.com/heroku/heroku-buildpack-python.git $ heroku addons:create heroku-postgresql:hobby-dev $ heroku addons:create heroku-redis:hobby-dev $ heroku addons:create sendgrid:starter $ heroku config:set ALLOWED_HOSTS=&amp;#39;&amp;lt;your hosts here&amp;gt;&amp;#39; $ heroku config:set NODE_MODULES_CACHE=false $ heroku config:set NPM_CONFIG_PRODUCTION=false $ heroku config:set SECRET_KEY=&amp;#39;&amp;lt;your secret key here&amp;gt;&amp;#39; Note
Heroku 的存储是不稳定的。这意味着应用程序的所有实例都将具有单独的磁盘，并且每次重新启动应用程序时都将丢失对本地磁盘所做的所有更改。最好的方法是使用 Amazon S3 等云存储。有关配置详细信息，请参阅 Storing Files on Amazon S3 。
部署（Deployment） $ git push heroku master 准备数据库（Preparing the Database） $ heroku run python manage.py migrate 更新货币汇率（Updating Currency Exchange Rates） 这需要定期运行。实现此目的的最佳方法是使用 Heroku 的调度程序服务（Heroku’s Scheduler service）。我们将其添加到我们的应用程序中：</description>
    </item>
    
    <item>
      <title>Saleor 39: 部署 - 在 Amazon S3 上存储文件</title>
      <link>/saleor/deployment/39_s3/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/deployment/39_s3/</guid>
      <description>如果您使用容器进行部署（包括 Docker 和 Heroku），您将希望避免将文件存储在容器的易失性文件系统中。此集成允许您将存储此类文件的任务委托给 Amazon’s S3 service。
基本配置   AWS_ACCESS_KEY_ID
您的AWS访问密钥。
  AWS_SECRET_ACCESS_KEY
您的AWS秘密访问密钥。
  使用 S3 存储桶提供媒体文件 如果要存储和提供媒体文件，请设置以下环境变量以将 S3 用作媒体存储区：
  AWS_MEDIA_BUCKET_NAME
用于媒体文件的S3存储桶名称。
  如果您打算为媒体S3存储桶使用自定义域，则可以将此环境变量设置为您的自定义 S3 媒体域：
  AWS_MEDIA_CUSTOM_DOMAIN
用于媒体存储区的 S3 自定义域。
  Note
媒体文件是指通过管理后台上传的每个数据（产品图像，类别图像等）
使用 S3 存储桶提供静态文件 默认情况下，应用程序服务器将提供静态文件（例如显示页面所需的 CSS 和 JS 文件）。
如果你打算为你的静态文件使用 S3，请设置一个额外的环境变量：
  AWS_STORAGE_BUCKET_NAME
用于静态文件的 S3 存储桶名称。
  如果您打算为静态 S3 存储桶使用自定义域，则可以将此环境变量设置为您的自定义 S3 域：
  AWS_STATIC_CUSTOM_DOMAIN
用于静态存储区的 S3 自定义域。</description>
    </item>
    
    <item>
      <title>Saleor 40: 操作指南 - 订单</title>
      <link>/saleor/guides/40_orders/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/guides/40_orders/</guid>
      <description>Saleor 提供了通过管理后台处理订单的功能。订单可以在管理后台的 Orders 选项卡中处理完成。
草稿订单 （Draft orders） 要创建草稿订单，首先您必须转到管理后台的 Orders 选项卡，然后选择现有订单列表上方可见的圆形 + 按钮。
这些订单可以完全编辑，直到通过点击创建订单确认。您可以修改订购商品、客户（也只是设置电子邮件）、账单和送货地址、送货方式及折扣。您应用的任何凭证都会导致自动订单重新计算，以适应每次订单实际状态的变化。
通过点击创建订单确认订单会将状态更改为未实现并禁用大部分编辑操作。您可以选择通过发送电子邮件通知客户 - 如果附加了任何 - 关于该订单。
将订单标记为已付款（Marking orders as paid） 在订单详情页面，如果需要，您可以手动将订单标记为已付款。此选项仅在未付款订单中可见，作为付款卡中的操作。
Warning
您将无法退还手动处理的付款。这是由于缺乏足够的数据来处理事务。</description>
    </item>
    
    <item>
      <title>Saleor 41: 操作指南 - 导航</title>
      <link>/saleor/guides/41_navigation/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/saleor/guides/41_navigation/</guid>
      <description>Saleor 提供了配置店面导航的功能。你可以在管理后台的 Navigation 选项卡中进行操作。
您可以在每个创建的菜单中添加最多 3 层菜单项。每个菜单项都可以通过传递额外的 URL 来指向包含 Category，Collection，Page 或外部网站的内部页面。
管理菜单项（Managing menu items） 要管理菜单项，首先您必须转到仪表板 Navigation 选项卡并选择要编辑的菜单。如果要管理嵌套的菜单项，可以上下浏览列出的菜单项。
要添加新菜单项，请选择 Add 菜单项列表上方可见的按钮。然后填写表格并点击 Create。
要编辑菜单项，请选择 Edit 列表上菜单项旁边可见的按钮或菜单项详细信息下方的按钮（如果您在菜单项详细信息视图内）。进行任何更改并单击。Edit menu item Update
要删除菜单项，请选择 Remove 列表上菜单项旁边可见的按钮或菜单项详细信息下方的按钮（如果您在菜单项详细信息视图内）。此操作将删除所有后代项目，并且不能撤消。Remove menu item
菜单项按菜单项列表中列出的顺序显示在店面上。您可以通过处理菜单项左侧的图标并将其拖动到另一个位置来重新排列它们。
管理菜单（Managing menus） 管理后台为您提供添加新菜单的功能。
一次可以有两个活动菜单（一个用于导航栏，另一个用于页脚，它们可以相同）。
当前分配的菜单可以通过仪表板的 Navigation 面板进行更改。
菜单默认呈现为垂直列表。你可以通过传递一个额外的 horizontal=True 参数来改变它。带有嵌套项目的水平菜单在桌面上显示为下拉菜单。</description>
    </item>
    
  </channel>
</rss>