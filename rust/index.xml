<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rusts on Jeremy&#39;s blog</title>
    <link>/rust/</link>
    <description>Recent content in Rusts on Jeremy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 21 Apr 2023 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>飞书消息通知要怎么声明 Rust 结构体</title>
      <link>/rust/2023-04-21-%E9%A3%9E%E4%B9%A6%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5%E8%A6%81%E6%80%8E%E4%B9%88%E5%A3%B0%E6%98%8E-rust-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/rust/2023-04-21-%E9%A3%9E%E4%B9%A6%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5%E8%A6%81%E6%80%8E%E4%B9%88%E5%A3%B0%E6%98%8E-rust-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>在企业服务这一板块，除了钉钉、企业微信，还有飞书，如果你要是在做一个与各大平台对接的产品，基本上必然少不了要对接各个平台的消息通知。
所以今天来简单看看飞书的消息通知在 Rust 中又会怎样声明数据结构。
飞书的消息格式是三大平台中形式最为丰富结构最为复杂的，无论是在技术领域还是在某些领域，后来者居上始终是一条铁律，如果一个后来者做不到超越前者，而如果仅仅只是跟随或者受到了前者的牵绊，那么就始终是坐不上头把交椅的。
而这个超越，不是说功能做的多么地复杂功能有多么地多，而是最终的客户体验的全面超越。支持做到客户体验的超越，背后是整个思维体系、产品理念、技术架构的全面换代超越，而这是平庸的部门管理者所无法真正理解的，毕竟职场里面的利益斗争真的是处处可见，几乎没有人是首先想到的是如何把事情做好，反而是首先上来就考虑自己的眼前的短期利益，而冠冕堂皇地还会被封装在一个叫做“投入产出比” “提高执行效率”的套话里面。
但始终是没有人会真正地理解：眼前最优解并不是近期最优解，近期最优解并不是长期最优解。
看似选对了每一小步的最优解，但却离全局最优解越来越远。深度学习为了防止过度拟合都需要引入随机变量，而企业内部如果只为追求完美无暇和表面上的漂亮，最终将获得的是一潭死水。
理念和方向选错了，走的再快那又如何呢？
我又废话了，扯回来飞书消息通知，它发送消息的内容格式说明的文档在 https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json
第一眼看上去你以为跟钉钉和企业微信也没啥差别，不就是那么几种常见的消息格式么，但是如果仔细想，每个平台都有一种消息格式是比较特殊和复杂度较高显示效果漂亮的，其实飞书也不例外：消息卡片，可以从文档跳到这里地址：https://open.feishu.cn/document/ukTMukTMukTM/uczM3QjL3MzN04yNzcDN 就能看到这个极为复杂和效果丰富的消息卡片的说明了。
这次由于格式复杂，内容量很大，就不全量贴代码了（其实是没写完 ^-^ ）
先看几个简单的例子：
一开始的文本消息就有好几个例子，我们只先看一个。
// 文本消息 { &amp;#34;receive_id&amp;#34;: &amp;#34;oc_xxx&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;{\&amp;#34;text\&amp;#34;:\&amp;#34;firstline \\n second line \&amp;#34;}&amp;#34;, &amp;#34;msg_type&amp;#34;: &amp;#34;text&amp;#34; } // 图片消息 { &amp;#34;receive_id&amp;#34;: &amp;#34;oc_xxx&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;{\&amp;#34;image_key\&amp;#34;: \&amp;#34;img_v2_xxx\&amp;#34;}&amp;#34;, &amp;#34;msg_type&amp;#34;: &amp;#34;image&amp;#34; } // 富文本消息 { &amp;#34;zh_cn&amp;#34;: { &amp;#34;title&amp;#34;: &amp;#34;我是一个标题&amp;#34;, &amp;#34;content&amp;#34;: [ [ { &amp;#34;tag&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;第一行:&amp;#34;, &amp;#34;style&amp;#34;: [&amp;#34;bold&amp;#34;, &amp;#34;underline&amp;#34;] }, { &amp;#34;tag&amp;#34;: &amp;#34;a&amp;#34;, &amp;#34;href&amp;#34;: &amp;#34;http://www.feishu.cn&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;超链接&amp;#34;, &amp;#34;style&amp;#34;: [&amp;#34;bold&amp;#34;, &amp;#34;italic&amp;#34;] }, { &amp;#34;tag&amp;#34;: &amp;#34;at&amp;#34;, &amp;#34;user_id&amp;#34;: &amp;#34;ou_1avnmsbv3k45jnk34j5&amp;#34;, &amp;#34;user_name&amp;#34;: &amp;#34;tom&amp;#34;, &amp;#34;style&amp;#34;: [&amp;#34;lineThrough&amp;#34;] } ], [{ &amp;#34;tag&amp;#34;: &amp;#34;img&amp;#34;, &amp;#34;image_key&amp;#34;: &amp;#34;img_7ea74629-9191-4176-998c-2e603c9c5e8g&amp;#34; }], [	{ &amp;#34;tag&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;第二行:&amp;#34;, &amp;#34;style&amp;#34;: [&amp;#34;bold&amp;#34;, &amp;#34;underline&amp;#34;] }, { &amp;#34;tag&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;文本测试&amp;#34; } ], [{ &amp;#34;tag&amp;#34;: &amp;#34;img&amp;#34;, &amp;#34;image_key&amp;#34;: &amp;#34;img_7ea74629-9191-4176-998c-2e603c9c5e8g&amp;#34; }], [{ &amp;#34;tag&amp;#34;: &amp;#34;media&amp;#34;, &amp;#34;file_key&amp;#34;: &amp;#34;file_v2_0dcdd7d9-fib0-4432-a519-41d25aca542j&amp;#34;, &amp;#34;image_key&amp;#34;: &amp;#34;img_7ea74629-9191-4176-998c-2e603c9c5e8g&amp;#34; }], [{ &amp;#34;tag&amp;#34;: &amp;#34;emotion&amp;#34;, &amp;#34;emoji_type&amp;#34;: &amp;#34;SMILE&amp;#34; }] ] }, &amp;#34;en_us&amp;#34;: { .</description>
    </item>
    
    <item>
      <title>企业微信消息通知要怎么声明 Rust 结构体</title>
      <link>/rust/2023-04-20-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5%E8%A6%81%E6%80%8E%E4%B9%88%E5%A3%B0%E6%98%8E-rust-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/rust/2023-04-20-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5%E8%A6%81%E6%80%8E%E4%B9%88%E5%A3%B0%E6%98%8E-rust-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>是的，今天来看企业微信的消息通知了，跟各大平台的消息通知杠上了，实际上是跟 Rust 的结构体杠上了。
毕竟，数据结构的设计和声明是编程工作中非常重要的部分，数据结构和结构体声明好了，代码其实就已经走好了很大一段路了。
而跟 Python 接触这些年，发现大多数情况下可能趋于只关注逻辑，却忘记了去关注数据结构的声明，宁愿很多时候在代码里面做很多奇奇怪怪的一些临时数据操作，也很难认真去真真切切地看一下到底有哪些数据主体，他们的关系是什么样的。谁和谁是同一个层面的，却被分在了不同的地方；谁又和谁本质上不是同一个东西，却又在代码里面绕啊绕，绕成了一个东西。
企业微信的消息通知，比钉钉的消息通知要稍微复杂一点，除了基本的几种消息结构外，它还有“模版卡片”这种复杂的消息结构，它的数据结构，其实等于在它的内层又声明了好几种更细分的格式定义，这里我们参考的文档是这个 https://developer.work.weixin.qq.com/document/path/90372
惯例，先看它的 json 声明
// 文本消息 { &amp;#34;touser&amp;#34; : &amp;#34;UserID1|UserID2|UserID3&amp;#34;, &amp;#34;toparty&amp;#34; : &amp;#34;PartyID1|PartyID2&amp;#34;, &amp;#34;totag&amp;#34; : &amp;#34;TagID1 | TagID2&amp;#34;, &amp;#34;msgtype&amp;#34; : &amp;#34;text&amp;#34;, &amp;#34;agentid&amp;#34; : 1, &amp;#34;text&amp;#34; : { &amp;#34;content&amp;#34; : &amp;#34;你的快递已到，请携带工卡前往邮件中心领取。\n出发前可查看&amp;lt;a href=\&amp;#34;http://work.weixin.qq.com\&amp;#34;&amp;gt;邮件中心视频实况&amp;lt;/a&amp;gt;，聪明避开排队。&amp;#34; }, &amp;#34;safe&amp;#34;:0, &amp;#34;enable_id_trans&amp;#34;: 0, &amp;#34;enable_duplicate_check&amp;#34;: 0, &amp;#34;duplicate_check_interval&amp;#34;: 1800 } // 图片消息 { &amp;#34;touser&amp;#34; : &amp;#34;UserID1|UserID2|UserID3&amp;#34;, &amp;#34;toparty&amp;#34; : &amp;#34;PartyID1|PartyID2&amp;#34;, &amp;#34;totag&amp;#34; : &amp;#34;TagID1 | TagID2&amp;#34;, &amp;#34;msgtype&amp;#34; : &amp;#34;image&amp;#34;, &amp;#34;agentid&amp;#34; : 1, &amp;#34;image&amp;#34; : { &amp;#34;media_id&amp;#34; : &amp;#34;MEDIA_ID&amp;#34; }, &amp;#34;safe&amp;#34;:0, &amp;#34;enable_duplicate_check&amp;#34;: 0, &amp;#34;duplicate_check_interval&amp;#34;: 1800 } // 语音消息 { &amp;#34;touser&amp;#34; : &amp;#34;UserID1|UserID2|UserID3&amp;#34;, &amp;#34;toparty&amp;#34; : &amp;#34;PartyID1|PartyID2&amp;#34;, &amp;#34;totag&amp;#34; : &amp;#34;TagID1 | TagID2&amp;#34;, &amp;#34;msgtype&amp;#34; : &amp;#34;voice&amp;#34;, &amp;#34;agentid&amp;#34; : 1, &amp;#34;voice&amp;#34; : { &amp;#34;media_id&amp;#34; : &amp;#34;MEDIA_ID&amp;#34; }, &amp;#34;enable_duplicate_check&amp;#34;: 0, &amp;#34;duplicate_check_interval&amp;#34;: 1800 } // 视频消息 { &amp;#34;touser&amp;#34; : &amp;#34;UserID1|UserID2|UserID3&amp;#34;, &amp;#34;toparty&amp;#34; : &amp;#34;PartyID1|PartyID2&amp;#34;, &amp;#34;totag&amp;#34; : &amp;#34;TagID1 | TagID2&amp;#34;, &amp;#34;msgtype&amp;#34; : &amp;#34;video&amp;#34;, &amp;#34;agentid&amp;#34; : 1, &amp;#34;video&amp;#34; : { &amp;#34;media_id&amp;#34; : &amp;#34;MEDIA_ID&amp;#34;, &amp;#34;title&amp;#34; : &amp;#34;Title&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;Description&amp;#34; }, &amp;#34;safe&amp;#34;:0, &amp;#34;enable_duplicate_check&amp;#34;: 0, &amp;#34;duplicate_check_interval&amp;#34;: 1800 } // 文件消息 { &amp;#34;touser&amp;#34; : &amp;#34;UserID1|UserID2|UserID3&amp;#34;, &amp;#34;toparty&amp;#34; : &amp;#34;PartyID1|PartyID2&amp;#34;, &amp;#34;totag&amp;#34; : &amp;#34;TagID1 | TagID2&amp;#34;, &amp;#34;msgtype&amp;#34; : &amp;#34;file&amp;#34;, &amp;#34;agentid&amp;#34; : 1, &amp;#34;file&amp;#34; : { &amp;#34;media_id&amp;#34; : &amp;#34;1Yv-zXfHjSjU-7LH-GwtYqDGS-zz6w22KmWAT5COgP7o&amp;#34; }, &amp;#34;safe&amp;#34;:0, &amp;#34;enable_duplicate_check&amp;#34;: 0, &amp;#34;duplicate_check_interval&amp;#34;: 1800 } // 文本卡片消息 { &amp;#34;touser&amp;#34; : &amp;#34;UserID1|UserID2|UserID3&amp;#34;, &amp;#34;toparty&amp;#34; : &amp;#34;PartyID1 | PartyID2&amp;#34;, &amp;#34;totag&amp;#34; : &amp;#34;TagID1 | TagID2&amp;#34;, &amp;#34;msgtype&amp;#34; : &amp;#34;textcard&amp;#34;, &amp;#34;agentid&amp;#34; : 1, &amp;#34;textcard&amp;#34; : { &amp;#34;title&amp;#34; : &amp;#34;领奖通知&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;&amp;lt;div class=\&amp;#34;gray\&amp;#34;&amp;gt;2016年9月26日&amp;lt;/div&amp;gt; &amp;lt;div class=\&amp;#34;normal\&amp;#34;&amp;gt;恭喜你抽中iPhone 7一台，领奖码：xxxx&amp;lt;/div&amp;gt;&amp;lt;div class=\&amp;#34;highlight\&amp;#34;&amp;gt;请于2016年10月10日前联系行政同事领取&amp;lt;/div&amp;gt;&amp;#34;, &amp;#34;url&amp;#34; : &amp;#34;URL&amp;#34;, &amp;#34;btntxt&amp;#34;:&amp;#34;更多&amp;#34; }, &amp;#34;enable_id_trans&amp;#34;: 0, &amp;#34;enable_duplicate_check&amp;#34;: 0, &amp;#34;duplicate_check_interval&amp;#34;: 1800 } // 图文消息 { &amp;#34;touser&amp;#34; : &amp;#34;UserID1|UserID2|UserID3&amp;#34;, &amp;#34;toparty&amp;#34; : &amp;#34;PartyID1 | PartyID2&amp;#34;, &amp;#34;totag&amp;#34; : &amp;#34;TagID1 | TagID2&amp;#34;, &amp;#34;msgtype&amp;#34; : &amp;#34;news&amp;#34;, &amp;#34;agentid&amp;#34; : 1, &amp;#34;news&amp;#34; : { &amp;#34;articles&amp;#34; : [ { &amp;#34;title&amp;#34; : &amp;#34;中秋节礼品领取&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;今年中秋节公司有豪礼相送&amp;#34;, &amp;#34;url&amp;#34; : &amp;#34;URL&amp;#34;, &amp;#34;picurl&amp;#34; : &amp;#34;http://res.</description>
    </item>
    
    <item>
      <title>钉钉消息通知要怎么声明 Rust 结构体</title>
      <link>/rust/2023-04-19-%E9%92%89%E9%92%89%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5%E8%A6%81%E6%80%8E%E4%B9%88%E5%A3%B0%E6%98%8E-rust-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/rust/2023-04-19-%E9%92%89%E9%92%89%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5%E8%A6%81%E6%80%8E%E4%B9%88%E5%A3%B0%E6%98%8E-rust-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>今天我们来看下钉钉的消息格式，比起对接接口的返回值，这个业务的结构体声明就烦琐许多了，当然，更多的也是体力活和细心加理解。
它的文档地址是这个：https://open.dingtalk.com/document/orgapp/message-types-and-data-format 由于钉钉分第三方企业应用和企业内部应用，而仅有企业内部应用能够支持到完整丰富的消息格式，第三方应用被限制在三种格式的模版申请上，这里就以企业内部应用的消息通知来进行说明。
先看下它的几个基本格式：
// 文本消息 { &amp;#34;msgtype&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;text&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;月会通知&amp;#34; } } // 图片消息 { &amp;#34;msgtype&amp;#34;: &amp;#34;image&amp;#34;, &amp;#34;image&amp;#34;: { &amp;#34;media_id&amp;#34;: &amp;#34;@lADOADmaWMzazQKA&amp;#34; } } // 语音消息 { &amp;#34;msgtype&amp;#34;: &amp;#34;voice&amp;#34;, &amp;#34;voice&amp;#34;: { &amp;#34;media_id&amp;#34;: &amp;#34;@lADOADmaWMzazQKA&amp;#34;, &amp;#34;duration&amp;#34;: &amp;#34;10&amp;#34; } } // 文件消息 { &amp;#34;msgtype&amp;#34;: &amp;#34;file&amp;#34;, &amp;#34;file&amp;#34;: { &amp;#34;media_id&amp;#34;: &amp;#34;MEDIA_ID&amp;#34; } } // 链接消息 { &amp;#34;msgtype&amp;#34;: &amp;#34;link&amp;#34;, &amp;#34;link&amp;#34;: { &amp;#34;messageUrl&amp;#34;: &amp;#34;http://s.dingtalk.com/market/dingtalk/error_code.php&amp;#34;, &amp;#34;picUrl&amp;#34;:&amp;#34;@lALOACZwe2Rk&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;测试&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;测试&amp;#34; } } // OA 消息 { &amp;#34;msgtype&amp;#34;: &amp;#34;oa&amp;#34;, &amp;#34;oa&amp;#34;: { &amp;#34;message_url&amp;#34;: &amp;#34;http://dingtalk.</description>
    </item>
    
    <item>
      <title>返回值有多种格式那要怎么声明 Rust 结构体</title>
      <link>/rust/2023-04-18-%E8%BF%94%E5%9B%9E%E5%80%BC%E6%9C%89%E5%A4%9A%E7%A7%8D%E6%A0%BC%E5%BC%8F%E9%82%A3%E8%A6%81%E6%80%8E%E4%B9%88%E5%A3%B0%E6%98%8E-rust-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/rust/2023-04-18-%E8%BF%94%E5%9B%9E%E5%80%BC%E6%9C%89%E5%A4%9A%E7%A7%8D%E6%A0%BC%E5%BC%8F%E9%82%A3%E8%A6%81%E6%80%8E%E4%B9%88%E5%A3%B0%E6%98%8E-rust-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>这算是 Rust 的第一篇内容，虽然有点水，但总算开动了。
最难跨越的就是真正开始去行动的那一刻。
Rust 的结构体和枚举非常厉害，它在形式上，也非常接近人的常规理解：层层分解。
写 Rust 其实有很大的一部分内容就是写结构体声明，一旦结构体声明出来了，基本上心理上就是落实了一大半了。
今天看下这种情况，比如你要请求一个接口，然后这个接口的返回值吧，并不总是保持一致的结构，而是根据不同情况有所不同的。
就比如拿 https://support.huaweicloud.com/api-ecs/ecs_02_0101.html#section7 这个页面的接口进行举例。
它的接口，除请求失败以外，请求成功的响应中，还分为正常响应和错误响应，而且错误响应可能也还有些字段内容是不一定返回的。
// 响应示例 { &amp;#34;job_id&amp;#34;: &amp;#34;ff808082739334d80173943ec9b42130&amp;#34;, &amp;#34;order_id&amp;#34;: &amp;#34;CS2007281506xxxxx&amp;#34;, &amp;#34;serverIds&amp;#34;: [ &amp;#34;fe0528f0-5b1c-4c8c-9adf-e5d5047b8c17&amp;#34;, &amp;#34;679854ae-a50d-40c9-8132-b19bf3a306a1&amp;#34; ] } // 或 { &amp;#34;error&amp;#34;: { &amp;#34;code&amp;#34;: &amp;#34;Ecs.0005&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;request body is illegal.&amp;#34; } } // 或 { &amp;#34;error&amp;#34;: { &amp;#34;message&amp;#34;: &amp;#34;privateIp [%s] is not in this subnet [%s]&amp;#34;, &amp;#34;code&amp;#34;: &amp;#34;Ecs.0005&amp;#34;, &amp;#34;details&amp;#34;: [ { &amp;#34;code&amp;#34;: &amp;#34;Ecs.0039&amp;#34; } ] } } 如果是在 Python 里面，上来粗暴点对待可能就是直接解析为字典 dict 然后结合状态码与字典 key 值进行判断处理了，而如果用到了高版本的 Python 然后又想要认真点对待，可能会去声明两个 dataclass 然后也根据状态码来使用 if else 进行分别处理。</description>
    </item>
    
  </channel>
</rss>